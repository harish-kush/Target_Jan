class Solution {
public:
vector<vector<int>>directions = {{0,1},{0,-1},{1,0},{-1,0}};
    int dfs(vector<vector<int>>& grid, vector<vector<bool>>& visited, int row, int col){
        // base case
        if(row<0 || row>=grid.size() || col<0 || col>=grid[0].size() || visited[row][col] || grid[row][col] == 0) return 0;

        visited[row][col] = true;

        int fishCount = grid[row][col]; // initialize fish count with current grid value
        for(auto dir: directions){
           fishCount+= dfs(grid,visited,row+dir[0],col+dir[1]); // check in all directions using recursion
        }
        return fishCount;
    }
    int findMaxFish(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<bool>>visited(n,vector<bool>(m,false)); // make a grid of m*n and intilize with false
        int maxCount = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!visited[i][j] && grid[i][j]!=0) maxCount = max(maxCount,dfs(grid,visited,i,j)); // check for every non zero value of grid
            }
        }
        return maxCount;
    }
};
