class Solution {
public:
    bool isAns(char ch) {
        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';
    }

    bool isVowel(const string& s) {
        int n = s.size();
        return isAns(s[0]) && isAns(s[n - 1]);
    }

    vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {
        int n = words.size();
        vector<int> prefix(n + 1, 0);

        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + (isVowel(words[i]) ? 1 : 0);
        }

        vector<int> ans;
        for (const auto& query : queries) {
            int left = query[0];
            int right = query[1];
            ans.push_back(prefix[right + 1] - prefix[left]);
        }

        return ans;
    }
};
