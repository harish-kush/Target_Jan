class Solution {
public:
    int getValue(int row, int col, vector<vector<int>>& grid){
        if(row<0 || col<0 || row>=grid.size() || col>=grid[0].size()) return 0;
        return grid[row][col];
    }
    int helper(int row, int col, int color, vector<vector<int>>& grid){
        if(getValue(row,col,grid)!=1) return 0; // already visited
        grid[row][col] = color;
        return 1 + helper(row+1,col,color,grid) + helper(row-1,col,color,grid) + helper(row,col+1,color,grid) + helper(row,col-1,color,grid);
    }
    int largestIsland(vector<vector<int>>& grid) {
        vector<int>islands = {0,0};
        for(int row = 0; row<grid.size();row++){
            for(int col = 0; col<grid[0].size();col++){
                // make colors of the neighbours and count no of that colors
                if(grid[row][col]==1) {
                    islands.push_back(helper(row,col,islands.size(),grid));
                }
            }
        }
        int maxSize = 0;
        for(int row = 0; row<grid.size();row++){
            for(int col = 0; col<grid[0].size();col++){
                // make a set of all neighbours of a particular cell having value 0
                if(grid[row][col]==0){
                    unordered_set<int>padosi={
                        getValue(row+1,col,grid) , getValue(row-1,col,grid) , 
                        getValue(row,col+1,grid) , getValue(row,col-1,grid)
                    };
                    int size = 1; // we consider that 0 cell value changes to one
                    for(int color: padosi){
                        size+=islands[color];
                    }
                    maxSize = max(maxSize,size);
                }
            }
        }
        if(maxSize==0) return grid.size()*grid[0].size();
        return maxSize;
    }
};
